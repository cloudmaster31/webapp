name: Build and Deploy Packer Image

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  test-and-build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: cloud
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run Tests
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_DIALECT: ${{ secrets.DB_DIALECT }}
        run: npm test

      


  build-and-deploy:
    if: github.event.pull_request.merged == true
    needs: test-and-build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create `webapp.zip`
        run: |
          zip -r webapp.zip .

      - name: Upload `webapp.zip` as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp-artifact
          path: webapp.zip


      - name: Download `webapp.zip` Artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp-artifact
          path: /tmp

      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}


      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Packer
        uses: hashicorp/setup-packer@v2
        with:
          packer_version: '>=1.0.0, <2.0.0' 

      - name: Initialize Packer
        run: |
          packer init packer/

      - name: set Environment Variables
        run: |
          echo "PKR_VAR_db_user=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "PKR_VAR_db_password=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "PKR_VAR_db_name=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "PKR_VAR_db_host=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
          echo "PKR_VAR_db_dialect=${{ secrets.DB_DIALECT }}" >> $GITHUB_ENV
          echo "PKR_VAR_aws_region=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "PKR_VAR_aws_instance_type=${{ secrets.AWS_INSTANCE_TYPE }}" >> $GITHUB_ENV
          echo "PKR_VAR_gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          echo "PKR_VAR_gcp_zone=${{ secrets.GCP_ZONE }}" >> $GITHUB_ENV
          echo "PKR_VAR_gcp_instance_type=${{ secrets.GCP_INSTANCE_TYPE }}" >> $GITHUB_ENV
          echo "PKR_VAR_artifact_path=${{ secrets.ARTIFACT_PATH }}" >> $GITHUB_ENV
      
    
      - name: Validate Packer Template
        run: |
          export $(grep ^PKR_VAR_ $GITHUB_ENV | xargs)
          packer validate packer/

      - name: Check downloaded files
        run: ls -lah /tmp  # Ensure webapp.zip is present

      - name: Fix permissions for webapp.zip
        run: sudo chown $(whoami):$(whoami) /tmp/webapp.zip && sudo chmod 644 /tmp/webapp.zip
      - name: Verify `webapp.zip` exists
        run: ls -lah /tmp/webapp.zip



      - name: Run Packer Build
        run: |
          set -e
          packer build packer/ || exit 1
